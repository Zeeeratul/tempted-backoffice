generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Auth {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  type            USER_TYPE
  userProfile     UserProfile?
  providerProfile ProviderProfile?
}

model UserProfile {
  id               String    @id @default(cuid())
  firstname        String    @default("")
  stripeCustomerId String    @default("")
  defaultMessage   String    @default("")
  authId           String    @unique
  auth             Auth      @relation(fields: [authId], references: [id], onDelete: Cascade)
  missions         Mission[]
}

model ProviderProfile {
  id                 String                    @id @default(cuid())
  firstname          String
  lastname           String
  birthdate          DateTime
  gender             GENDERS
  avatarKey          String
  picture1Key        String?
  picture2Key        String?
  picture3Key        String?
  description        String                    @db.Text
  hairColor          HAIR_COLORS?
  languages          ProviderLanguage[]
  genderTargetted    ProviderGenderTargetted[]
  service1Price      Float
  service2Price      Float                     @default(15)
  instagramUsername  String
  instagramFollowers INSTAGRAM_FOLLOWERS
  stripeAccountId    String                    @default("")
  currency           String                    @default("eur")
  verified           Boolean                   @default(false)
  disabled           Boolean                   @default(false)
  authId             String                    @unique
  auth               Auth                      @relation(fields: [authId], references: [id], onDelete: Cascade)
  missions           Mission[]
}

model ProviderLanguage {
  id                String          @id @default(cuid())
  language          LANGUAGES
  providerProfileId String
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id])
}

model ProviderGenderTargetted {
  id                String          @id @default(cuid())
  gender            GENDERS
  providerProfileId String
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id])
}

model Mission {
  id                String          @id @default(cuid())
  startedAt         DateTime        @default(now())
  doneAt            DateTime        @default(now())
  price             Float
  currency          String          @default("eur")
  status            MISSION_STATUS
  paymentIntentId   String
  userProfile       UserProfile     @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId     String
  providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
  providerProfileId String
  messages          Message[]
}

model Message {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  content   String
  type      MESSAGE_TYPE
  userType  USER_TYPE
  mission   Mission      @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId String
}

enum MESSAGE_TYPE {
  TEXT
  IMAGE_FILE
  INFORMATION
  DATE
}

enum MISSION_STATUS {
  WAITING
  EXPIRED_REQUEST
  REFUSED_BY_PROVIDER
  CANCELED_BY_USER
  ONGOING
  CANCELED_BY_PROVIDER
  EXPIRED_MISSION
  DONE_FOR_PROVIDER
  FAILED_FOR_USER
  DONE_FOR_USER
  FAILED
}

enum GENDERS {
  MALE
  FEMALE
  NON_BINARY
  TRANSEXUAL
}

enum INSTAGRAM_FOLLOWERS {
  LESS_THAN_1000
  BETWEEN_1000_AND_5000
  BETWEEN_5000_AND_10000
  MORE_THAN_10000
}

enum HAIR_COLORS {
  BLACK
  BROWN
  BLONDE
  RED
}

enum LANGUAGES {
  FRENCH
  ENGLISH
  SPANISH
  GERMAN
  PORTUGUESE
  ITALIAN
  ARABIC
  MANDARIN
}

enum USER_TYPE {
  USER
  PROVIDER
}
